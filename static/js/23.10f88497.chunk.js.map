{"version":3,"file":"static/js/23.10f88497.chunk.js","mappings":"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","sources":["components/invoice-qr-code.tsx/index.tsx","components/qr-code/index.tsx","components/layout/index.js","components/text-input/index.tsx","pages/skv-qrcode-page.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport QRCode from '../qr-code';\n\nexport enum PaymentMethodType {\n  IBAN = 'IBAN',\n  BBAN = 'BBAN',\n  BG = 'bg',\n  PG = 'PG',\n}\n\ntype Props = {\n  width: number;\n\n  // https://drive.google.com/file/d/14XR6F1XnUkuWatldkOVr69Fr4of5g98P/view\n  uqr?: number;\n  tp?: number;\n  nme?: string;\n  cid?: string;\n  iref?: number;\n  ddt?: Date;\n  due?: number;\n  pt?: PaymentMethodType;\n  acc?: string;\n};\n\nconst InvoiceQRCode = (props: Props) => {\n  const {\n    uqr = 1,\n    tp = 1,\n    nme = '',\n    cid = '',\n    iref = -1,\n    ddt = new Date(),\n    due = 0,\n    pt = PaymentMethodType.BG,\n    acc = '',\n\n    width,\n  } = props;\n\n  const content = useMemo(() => {\n    return JSON.stringify({\n      uqr,\n      tp,\n      nme,\n      cid,\n      iref,\n      ddt: ddt.toISOString().slice(0, 10).replace(/-/g, ''),\n      due,\n      pt,\n      acc,\n    });\n  }, [uqr, tp, nme, cid, iref, ddt, due, pt, acc]);\n\n  return <QRCode content={content} width={width} />;\n};\n\nexport default InvoiceQRCode;\n","import React, { useEffect, useRef } from 'react';\nimport qrcode from 'qrcode';\n\ntype QRCodeProps = {\n  content: string;\n  width: number;\n};\nconst QRCode = (props: QRCodeProps) => {\n  const { content, width } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      qrcode.toCanvas(canvasRef.current, content, {\n        width,\n        errorCorrectionLevel: 'H',\n      });\n    }\n  }, [content, width]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default QRCode;\n","import styled from 'styled-components/macro';\n\nconst Stack = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-row-gap: 10px;\n`;\n\nexport { Stack };\n","import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import { useCallback, useState } from 'react';\nimport styled from 'styled-components/macro';\nimport InvoiceQRCode, {\n  PaymentMethodType,\n} from '../components/invoice-qr-code.tsx';\nimport TextInput from '../components/text-input';\nimport { Stack } from '../components/layout';\n\nconst QR_CODE_WIDTH = 300;\nconst SKV_BG_NUMBER = '5050-1055';\n\nconst OCR_LOCAL_STORAGE_KEY = 'SKV_OCR';\n\nconst PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n`;\nconst QRPagePartWrapper = styled.div`\n  padding: 50px;\n  display: flex;\n  justify-content: center;\n`;\nconst QRWrapper = styled.div`\n  position: relative;\n  width: ${QR_CODE_WIDTH}px;\n  height: ${QR_CODE_WIDTH}px;\n`;\n\nconst DimmingOverlay = styled.div`\n  padding: 50px;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  display: flex;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: black;\n  opacity: 0.9;\n`;\n\nconst SKVQRCodePage = () => {\n  const [ocrInput, setOCRInput] = useState(() => {\n    const stored = window.localStorage.getItem(OCR_LOCAL_STORAGE_KEY);\n    if (stored) {\n      const parsed = parseInt(stored, 10);\n      if (Number.isFinite(parsed)) {\n        return parsed.toString();\n      }\n    }\n\n    return '';\n  });\n  const [amountInput, setAmountInput] = useState('');\n\n  const handleOCRChange = useCallback((value: string) => {\n    setOCRInput(value);\n    window.localStorage.setItem(OCR_LOCAL_STORAGE_KEY, value);\n  }, []);\n  const handleAmountChange = useCallback((value: string) => {\n    setAmountInput(value);\n  }, []);\n\n  const amount = parseFloat(amountInput);\n  const ocr = parseInt(ocrInput, 10);\n\n  return (\n    <PageWrapper>\n      <div>\n        <h2>Skattekonto QR-kod</h2>\n        <p>\n          Använd denna sida för att autoifylla en betalning till ditt\n          skattekonto genom att scanna qr koden. Glöm inte att verifiera det som\n          står i din bank innan du gör någon betalning.\n        </p>\n        <Stack>\n          <TextInput\n            label=\"OCR\"\n            type=\"number\"\n            onChange={handleOCRChange}\n            value={ocrInput}\n          />\n          <TextInput\n            label=\"Amount\"\n            type=\"number\"\n            onChange={handleAmountChange}\n            value={amountInput}\n            step={0.1}\n          />\n          <div>BG kontonummer: {SKV_BG_NUMBER}</div>\n        </Stack>\n      </div>\n      <QRPagePartWrapper>\n        <QRWrapper>\n          <InvoiceQRCode\n            width={QR_CODE_WIDTH}\n            iref={ocr}\n            acc={SKV_BG_NUMBER}\n            due={amount}\n            pt={PaymentMethodType.BG}\n          />\n          {!Number.isFinite(amount) && (\n            <DimmingOverlay>\n              Fyll i alla fält för att få en giltig QR-kod\n            </DimmingOverlay>\n          )}\n        </QRWrapper>\n      </QRPagePartWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default SKVQRCodePage;\n"],"names":["PaymentMethodType","props","content","width","canvasRef","useRef","useEffect","current","qrcode","errorCorrectionLevel","ref","uqr","tp","nme","cid","iref","ddt","Date","due","pt","BG","acc","useMemo","JSON","stringify","toISOString","slice","replace","Stack","styled","StyledWrapper","StyledInput","StyledLabel","label","onChange","value","type","step","handleChange","useCallback","e","currentTarget","SKV_BG_NUMBER","OCR_LOCAL_STORAGE_KEY","PageWrapper","QRPagePartWrapper","QRWrapper","DimmingOverlay","useState","stored","window","localStorage","getItem","parsed","parseInt","Number","isFinite","toString","ocrInput","setOCRInput","amountInput","setAmountInput","handleOCRChange","setItem","handleAmountChange","amount","parseFloat","ocr"],"sourceRoot":""}
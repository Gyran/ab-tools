{"version":3,"file":"static/js/445.534070c9.chunk.js","mappings":"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","sources":["components/text-input/index.tsx","components/invoice-qr-code.tsx/index.tsx","components/qr-code/index.tsx","pages/skv-qrcode-page.tsx"],"sourcesContent":["import { useCallback, ChangeEvent } from 'react';\nimport { TextField } from '@mui/material';\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>, ...b: any) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <TextField\n      label={label}\n      value={value}\n      onChange={handleChange}\n      type={type}\n      inputProps={{ step }}\n    />\n  );\n};\n\nexport default TextInput;\n","import React, { useMemo } from 'react';\nimport QRCode from '../qr-code';\n\nexport enum PaymentMethodType {\n  IBAN = 'IBAN',\n  BBAN = 'BBAN',\n  BG = 'bg',\n  PG = 'PG',\n}\n\ntype Props = {\n  width: number;\n\n  // https://drive.google.com/file/d/14XR6F1XnUkuWatldkOVr69Fr4of5g98P/view\n  uqr?: number;\n  tp?: number;\n  nme?: string;\n  cid?: string;\n  iref?: number;\n  ddt?: Date;\n  due?: number;\n  pt?: PaymentMethodType;\n  acc?: string;\n};\n\nconst InvoiceQRCode = (props: Props) => {\n  const {\n    uqr = 1,\n    tp = 1,\n    nme = '',\n    cid = '',\n    iref = -1,\n    ddt = new Date(),\n    due = 0,\n    pt = PaymentMethodType.BG,\n    acc = '',\n\n    width,\n  } = props;\n\n  const content = useMemo(() => {\n    return JSON.stringify({\n      uqr,\n      tp,\n      nme,\n      cid,\n      iref,\n      ddt: ddt.toISOString().slice(0, 10).replace(/-/g, ''),\n      due,\n      pt,\n      acc,\n    });\n  }, [uqr, tp, nme, cid, iref, ddt, due, pt, acc]);\n\n  return <QRCode content={content} width={width} />;\n};\n\nexport default InvoiceQRCode;\n","import React, { useEffect, useRef } from 'react';\nimport qrcode from 'qrcode';\n\ntype QRCodeProps = {\n  content: string;\n  width: number;\n};\nconst QRCode = (props: QRCodeProps) => {\n  const { content, width } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      qrcode.toCanvas(canvasRef.current, content, {\n        width,\n        errorCorrectionLevel: 'H',\n      });\n    }\n  }, [content, width]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default QRCode;\n","import { useCallback, useState } from 'react';\nimport InvoiceQRCode, {\n  PaymentMethodType,\n} from '../components/invoice-qr-code.tsx';\nimport TextInput from '../components/text-input';\nimport { Box, Typography, Stack } from '@mui/material';\n\nconst QR_CODE_WIDTH = 300;\nconst SKV_BG_NUMBER = '5050-1055';\n\nconst OCR_LOCAL_STORAGE_KEY = 'SKV_OCR';\n\nconst SKVQRCodePage = () => {\n  const [ocrInput, setOCRInput] = useState(() => {\n    const stored = window.localStorage.getItem(OCR_LOCAL_STORAGE_KEY);\n    if (stored) {\n      const parsed = parseInt(stored, 10);\n      if (Number.isFinite(parsed)) {\n        return parsed.toString();\n      }\n    }\n\n    return '';\n  });\n  const [amountInput, setAmountInput] = useState('');\n\n  const handleOCRChange = useCallback((value: string) => {\n    setOCRInput(value);\n    window.localStorage.setItem(OCR_LOCAL_STORAGE_KEY, value);\n  }, []);\n  const handleAmountChange = useCallback((value: string) => {\n    setAmountInput(value);\n  }, []);\n\n  const amount = parseFloat(amountInput);\n  const ocr = parseInt(ocrInput, 10);\n\n  return (\n    <Box sx={{ display: 'grid', gridTemplateColumns: '300px 1fr' }}>\n      <Box>\n        <Typography variant=\"h2\">Skattekonto QR-kod</Typography>\n        <Typography variant=\"body1\" mt={2}>\n          Använd denna sida för att autoifylla en betalning till ditt\n          skattekonto genom att scanna qr koden. Glöm inte att verifiera det som\n          står i din bank innan du gör någon betalning.\n        </Typography>\n        <Stack mt={2} spacing={2}>\n          <TextInput\n            label=\"OCR\"\n            type=\"number\"\n            onChange={handleOCRChange}\n            value={ocrInput}\n          />\n          <TextInput\n            label=\"Amount\"\n            type=\"number\"\n            onChange={handleAmountChange}\n            value={amountInput}\n            step={0.1}\n          />\n          <Typography variant=\"body1\">\n            BG kontonummer: {SKV_BG_NUMBER}\n          </Typography>\n        </Stack>\n      </Box>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Box width={QR_CODE_WIDTH} height={QR_CODE_WIDTH} position={'relative'}>\n          <InvoiceQRCode\n            width={QR_CODE_WIDTH}\n            iref={ocr}\n            acc={SKV_BG_NUMBER}\n            due={amount}\n            pt={PaymentMethodType.BG}\n          />\n          {!Number.isFinite(amount) && (\n            <Box\n              sx={{\n                p: 5,\n                justifyContent: 'center',\n                alignItems: 'center',\n                textAlign: 'center',\n                display: 'flex',\n                position: 'absolute',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0,\n                backgroundColor: 'black',\n                opacity: 0.9,\n                color: 'white',\n              }}\n            >\n              <Typography variant=\"overline\">\n                Fyll i alla fält för att få en giltig QR-kod\n              </Typography>\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default SKVQRCodePage;\n"],"names":["props","label","onChange","value","type","step","handleChange","useCallback","e","currentTarget","inputProps","PaymentMethodType","content","width","canvasRef","useRef","useEffect","current","qrcode","errorCorrectionLevel","ref","uqr","tp","nme","cid","iref","ddt","Date","due","pt","BG","acc","useMemo","JSON","stringify","toISOString","slice","replace","SKV_BG_NUMBER","OCR_LOCAL_STORAGE_KEY","useState","stored","window","localStorage","getItem","parsed","parseInt","Number","isFinite","toString","ocrInput","setOCRInput","amountInput","setAmountInput","handleOCRChange","setItem","handleAmountChange","amount","parseFloat","ocr","Box","sx","display","gridTemplateColumns","Typography","variant","mt","Stack","spacing","alignItems","justifyContent","height","position","p","textAlign","top","left","right","bottom","backgroundColor","opacity","color"],"sourceRoot":""}
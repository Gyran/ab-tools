{"version":3,"sources":["components/text-input/index.tsx","components/layout/index.js","pages/vat-calculator.tsx"],"names":["StyledWrapper","styled","div","StyledInput","input","StyledLabel","label","TextInput","props","onChange","value","type","step","handleChange","useCallback","e","currentTarget","Stack","VatCalculator","useState","vatRateInput","setVatRateInput","exclVatInput","setExclVatInput","vatRate","useMemo","parseInt","exclVat","parseFloat","vatSum","handleVatRangeChange","handleExclVatChange","handleIncVatChange","parsedInc","Number","isFinite","toString","toFixed"],"mappings":"kJAGMA,EAAgBC,IAAOC,IAAV,0BACbC,EAAcF,IAAOG,MAAV,0BACXC,EAAcJ,IAAOK,MAAV,4FAoCFC,IAvBG,SAACC,GACjB,IAAQF,EAAgDE,EAAhDF,MAAOG,EAAyCD,EAAzCC,SAAUC,EAA+BF,EAA/BE,MAAzB,EAAwDF,EAAxBG,YAAhC,MAAuC,OAAvC,EAA+CC,EAASJ,EAATI,KAEzCC,EAAeC,uBACnB,SAACC,GACCN,EAASM,EAAEC,cAAcN,SAE3B,CAACD,IAGH,OACE,eAACT,EAAD,WACE,cAACK,EAAD,UAAcC,IACd,cAACH,EAAD,CACEM,SAAUI,EACVF,KAAMA,EACND,MAAOA,EACPE,KAAMA,S,sECjCRK,E,KAAQhB,EAAOC,IAAV,mEAAGD,CAAH,gE,gFC6DIiB,UAxDO,SAACV,GACrB,MAAwCW,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAwCF,mBAAS,IAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KAEMC,EAAUC,mBACd,iBAAwB,KAAjBL,EAAsBM,SAASN,EAAc,IAAM,KAAO,IACjE,CAACA,IAEGO,EAAUF,mBAAQ,kBAAMG,WAAWN,KAAe,CAACA,IACnDO,EAASJ,mBAAQ,kBAAME,EAAUH,IAAS,CAACG,EAASH,IAEpDM,EAAuBhB,uBAAY,SAACJ,GACxCW,EAAgBX,KACf,IACGqB,EAAsBjB,uBAAY,SAACJ,GACvCa,EAAgBb,KACf,IACGsB,EAAqBlB,uBACzB,SAACJ,GACC,IAAMuB,EAAYL,WAAWlB,GACzBwB,OAAOC,SAASF,GAGlBV,GAFiBU,GAAa,EAAIT,IAETY,YAEzBb,EAAgB,MAGpB,CAACC,IAGH,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACElB,MAAM,eACNK,KAAK,SACLD,MAAOU,EACPX,SAAUqB,IAEZ,cAAC,IAAD,CACExB,MAAM,sBACNK,KAAK,SACLD,MAAOY,EACPb,SAAUsB,IAEZ,cAAC,IAAD,CACEzB,MAAM,sBACNK,KAAK,SACLD,OAAQiB,EAAUE,GAAQO,WAC1B3B,SAAUuB,IAEZ,yCAAYE,OAAOC,SAASN,GAAUA,EAAOQ,QAAQ,GAAK,IAA1D","file":"static/js/5.a81c36b7.chunk.js","sourcesContent":["import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import styled from 'styled-components/macro';\n\nconst Stack = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-row-gap: 10px;\n`;\n\nexport { Stack };\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Stack } from '../components/layout';\nimport TextInput from '../components/text-input';\n\ntype Props = {};\n\nconst VatCalculator = (props: Props) => {\n  const [vatRateInput, setVatRateInput] = useState('25');\n  const [exclVatInput, setExclVatInput] = useState('');\n\n  const vatRate = useMemo(\n    () => (vatRateInput !== '' ? parseInt(vatRateInput, 10) / 100 : -1),\n    [vatRateInput],\n  );\n  const exclVat = useMemo(() => parseFloat(exclVatInput), [exclVatInput]);\n  const vatSum = useMemo(() => exclVat * vatRate, [exclVat, vatRate]);\n\n  const handleVatRangeChange = useCallback((value) => {\n    setVatRateInput(value);\n  }, []);\n  const handleExclVatChange = useCallback((value) => {\n    setExclVatInput(value);\n  }, []);\n  const handleIncVatChange = useCallback(\n    (value) => {\n      const parsedInc = parseFloat(value);\n      if (Number.isFinite(parsedInc)) {\n        const calcExcl = parsedInc / (1 + vatRate);\n\n        setExclVatInput(calcExcl.toString());\n      } else {\n        setExclVatInput('');\n      }\n    },\n    [vatRate],\n  );\n\n  return (\n    <Stack>\n      <TextInput\n        label=\"Momssats (%)\"\n        type=\"number\"\n        value={vatRateInput}\n        onChange={handleVatRangeChange}\n      />\n      <TextInput\n        label=\"Exklusive moms (kr)\"\n        type=\"number\"\n        value={exclVatInput}\n        onChange={handleExclVatChange}\n      />\n      <TextInput\n        label=\"Inklusive moms (kr)\"\n        type=\"number\"\n        value={(exclVat + vatSum).toString()}\n        onChange={handleIncVatChange}\n      />\n      <div>Moms: {Number.isFinite(vatSum) ? vatSum.toFixed(2) : '-'} kr</div>\n    </Stack>\n  );\n};\n\nexport default VatCalculator;\n"],"sourceRoot":""}
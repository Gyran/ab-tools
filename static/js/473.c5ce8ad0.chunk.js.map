{"version":3,"file":"static/js/473.c5ce8ad0.chunk.js","mappings":"0IA+BA,IArBkB,SAACA,GACjB,IAAQC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,MAAzB,EAAwDH,EAAxBI,KAAAA,OAAhC,MAAuC,OAAvC,EAA+CC,EAASL,EAATK,KAEzCC,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GACCN,EAASM,EAAEC,cAAcN,SAE3B,CAACD,IAGH,OACE,SAAC,IAAD,CACED,MAAOA,EACPE,MAAOA,EACPD,SAAUI,EACVF,KAAMA,EACNM,WAAY,CAAEL,KAAAA,O,yFCuCpB,UA1DsB,SAACL,GACrB,OAAwCW,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEMC,GAAUC,EAAAA,EAAAA,UACd,iBAAwB,KAAjBL,EAAsBM,SAASN,EAAc,IAAM,KAAO,IACjE,CAACA,IAEGO,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMG,WAAWN,KAAe,CAACA,IACnDO,GAASJ,EAAAA,EAAAA,UAAQ,kBAAME,EAAUH,IAAS,CAACG,EAASH,IAEpDM,GAAuBf,EAAAA,EAAAA,cAAY,SAACJ,GACxCU,EAAgBV,KACf,IACGoB,GAAsBhB,EAAAA,EAAAA,cAAY,SAACJ,GACvCY,EAAgBZ,KACf,IACGqB,GAAqBjB,EAAAA,EAAAA,cACzB,SAACJ,GACC,IAAMsB,EAAYL,WAAWjB,GACzBuB,OAAOC,SAASF,GAGlBV,GAFiBU,GAAa,EAAIT,IAETY,YAEzBb,EAAgB,MAGpB,CAACC,IAGH,OACE,UAAC,IAAD,CAAOa,QAAS,EAAhB,WACE,SAAC,IAAD,CACE5B,MAAM,eACNG,KAAK,SACLD,MAAOS,EACPV,SAAUoB,KAEZ,SAAC,IAAD,CACErB,MAAM,sBACNG,KAAK,SACLD,MAAOW,EACPZ,SAAUqB,KAEZ,SAAC,IAAD,CACEtB,MAAM,sBACNG,KAAK,SACLD,OAAQgB,EAAUE,GAAQO,WAC1B1B,SAAUsB,KAEZ,UAAC,IAAD,CAAYM,QAAQ,QAApB,mBACSJ,OAAOC,SAASN,GAAUA,EAAOU,QAAQ,GAAK,IADvD","sources":["components/text-input/index.tsx","pages/vat-calculator.tsx"],"sourcesContent":["import { useCallback, ChangeEvent } from 'react';\nimport { TextField } from '@mui/material';\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>, ...b: any) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <TextField\n      label={label}\n      value={value}\n      onChange={handleChange}\n      type={type}\n      inputProps={{ step }}\n    />\n  );\n};\n\nexport default TextInput;\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Stack, Typography } from '@mui/material';\nimport TextInput from '../components/text-input';\n\ntype Props = {};\n\nconst VatCalculator = (props: Props) => {\n  const [vatRateInput, setVatRateInput] = useState('25');\n  const [exclVatInput, setExclVatInput] = useState('');\n\n  const vatRate = useMemo(\n    () => (vatRateInput !== '' ? parseInt(vatRateInput, 10) / 100 : -1),\n    [vatRateInput],\n  );\n  const exclVat = useMemo(() => parseFloat(exclVatInput), [exclVatInput]);\n  const vatSum = useMemo(() => exclVat * vatRate, [exclVat, vatRate]);\n\n  const handleVatRangeChange = useCallback((value) => {\n    setVatRateInput(value);\n  }, []);\n  const handleExclVatChange = useCallback((value) => {\n    setExclVatInput(value);\n  }, []);\n  const handleIncVatChange = useCallback(\n    (value) => {\n      const parsedInc = parseFloat(value);\n      if (Number.isFinite(parsedInc)) {\n        const calcExcl = parsedInc / (1 + vatRate);\n\n        setExclVatInput(calcExcl.toString());\n      } else {\n        setExclVatInput('');\n      }\n    },\n    [vatRate],\n  );\n\n  return (\n    <Stack spacing={2}>\n      <TextInput\n        label=\"Momssats (%)\"\n        type=\"number\"\n        value={vatRateInput}\n        onChange={handleVatRangeChange}\n      />\n      <TextInput\n        label=\"Exklusive moms (kr)\"\n        type=\"number\"\n        value={exclVatInput}\n        onChange={handleExclVatChange}\n      />\n      <TextInput\n        label=\"Inklusive moms (kr)\"\n        type=\"number\"\n        value={(exclVat + vatSum).toString()}\n        onChange={handleIncVatChange}\n      />\n      <Typography variant=\"body1\">\n        Moms: {Number.isFinite(vatSum) ? vatSum.toFixed(2) : '-'} kr\n      </Typography>\n    </Stack>\n  );\n};\n\nexport default VatCalculator;\n"],"names":["props","label","onChange","value","type","step","handleChange","useCallback","e","currentTarget","inputProps","useState","vatRateInput","setVatRateInput","exclVatInput","setExclVatInput","vatRate","useMemo","parseInt","exclVat","parseFloat","vatSum","handleVatRangeChange","handleExclVatChange","handleIncVatChange","parsedInc","Number","isFinite","toString","spacing","variant","toFixed"],"sourceRoot":""}
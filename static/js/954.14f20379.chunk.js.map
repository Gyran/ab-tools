{"version":3,"file":"static/js/954.14f20379.chunk.js","mappings":"6IAEMA,E,QAAQC,GAAAA,IAAAA,WAAH,wDAAGA,CAAH,gE,qECCLC,EAAgBD,EAAAA,GAAAA,IAAH,sBACbE,EAAcF,EAAAA,GAAAA,MAAH,sBACXG,EAAcH,EAAAA,GAAAA,MAAH,wFAoCjB,IAvBkB,SAACI,GACjB,IAAQC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,MAAzB,EAAwDH,EAAxBI,KAAAA,OAAhC,MAAuC,OAAvC,EAA+CC,EAASL,EAATK,KAEzCC,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GACCN,EAASM,EAAEC,cAAcN,SAE3B,CAACD,IAGH,OACE,UAACL,EAAD,YACE,SAACE,EAAD,UAAcE,KACd,SAACH,EAAD,CACEI,SAAUI,EACVF,KAAMA,EACND,MAAOA,EACPE,KAAMA,S,2FC9BRK,EAAcd,EAAAA,GAAAA,IAAAA,WAAH,iFAAGA,CAAH,MACXe,EAAUf,EAAAA,GAAAA,IAAAA,WAAH,6EAAGA,CAAH,mDAKPgB,EAAe,SAACC,GAAsC,IAA1BC,EAAyB,uDAAd,EACrCC,EAASC,WAAWH,GAE1B,OAAII,OAAOC,SAASH,GACXA,EAGFD,GAGHK,EAAqB,OACrBC,EAA8B,OAE9BC,EAAe,IAAIC,KAAKC,aAAa,QAAS,CAClDC,MAAO,WACPC,SAAU,QAGNC,EAAsB,WAG0C,IAFpEC,EAEmE,uDAFpD,GACfC,EACmE,uDADnD,EAEhB,GAA8BC,EAAAA,EAAAA,UAASF,GAAvC,eAAOd,EAAP,KAAcP,EAAd,KACMH,EAAQS,EAAaC,EAAOe,GAElC,MAAO,CAACf,EAAOP,EAAcH,IA2F/B,UAxFgC,WAC9B,MACEuB,IADF,eAAOI,EAAP,KAAuBC,EAAvB,KAA8CC,EAA9C,KAEA,EACEN,IADF,eAAOO,EAAP,KAAsBC,EAAtB,KAA6CC,EAA7C,KAEA,EAIIT,IAJJ,eACEU,EADF,KAEEC,EAFF,KAMMC,EAAcN,EAAYG,EANhC,KAQMI,EAAqBpB,EAAqBmB,EAEhD,OACE,UAAC5B,EAAD,YACE,kIAIA,qNAKA,UAACC,EAAD,YACE,UAAC,IAAD,YACE,6CACoB,KAClB,cAAG6B,KAAK,6FAAR,mDAEK,IAJP,6BAOA,SAAC,IAAD,CACEvC,MAAM,eACNG,KAAK,SACLD,MAAO2B,EACP5B,SAAU6B,KAEZ,SAAC,IAAD,CACE9B,MAAM,iBACNG,KAAK,SACLD,MAAO8B,EACP/B,SAAUgC,KAEZ,SAAC,IAAD,CACEjC,MAAM,+BACNG,KAAK,SACLD,MAAOiC,EACPlC,SAAUmC,QAGd,UAAC,IAAD,YACE,8CAAsBhB,EAAaoB,OAAOH,OAC1C,0BACE,cAAGE,KAAK,4MAAR,2CADF,KAIKnB,EAAaoB,OAAOtB,OAEzB,8EACsC,KACpC,cAAGqB,KAAK,gGAAR,kEAEK,IACJnB,EAAaoB,OAAOrB,GALvB,2GAQA,kEACmC,KACjC,uBAAIC,EAAaoB,OAAOF,SAE1B,2GACmE,KACjE,uBACGlB,EAAaoB,OACZC,KAAKC,IAAIvB,EAA8BY,EAAW","sources":["components/layout/index.js","components/text-input/index.tsx","pages/calculate-december-salary.tsx"],"sourcesContent":["import styled from 'styled-components/macro';\n\nconst Stack = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-row-gap: 10px;\n`;\n\nexport { Stack };\n","import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import { useState } from 'react';\nimport styled from 'styled-components/macro';\nimport { Stack } from '../components/layout';\nimport TextInput from '../components/text-input';\n\nconst PageWrapper = styled.div``;\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 300px;\n`;\n\nconst ensureNumber = (input: any, fallback = 0): number => {\n  const parsed = parseFloat(input);\n\n  if (Number.isFinite(parsed)) {\n    return parsed;\n  }\n\n  return fallback;\n};\n\nconst StateTaxBreakPoint = 537200;\nconst HuvudregelnIncomeBreakPoint = 430737;\n\nconst sekFormatter = new Intl.NumberFormat('sv-SE', {\n  style: 'currency',\n  currency: 'SEK',\n});\n\nconst useNumberInputState = (\n  initialInput = '',\n  fallbackValue = 0,\n): [string, React.Dispatch<React.SetStateAction<string>>, number] => {\n  const [input, handleChange] = useState(initialInput);\n  const value = ensureNumber(input, fallbackValue);\n\n  return [input, handleChange, value];\n};\n\nconst CalculateDecemberSalary = () => {\n  const [bruttoLonInput, handleBruttoLonChange, bruttoLon] =\n    useNumberInputState();\n  const [formanerInput, handleFormanerIChange, formaner] =\n    useNumberInputState();\n  const [\n    ersattningarOchPensionInput,\n    handleErsattningarOchPensionChange,\n    ersattningarOchPension,\n  ] = useNumberInputState();\n\n  const totalIncome = bruttoLon + formaner + ersattningarOchPension;\n\n  const suggestedDecSalary = StateTaxBreakPoint - totalIncome;\n\n  return (\n    <PageWrapper>\n      <h2>\n        Hur mycket behöver du ta i lön i december för att nå till gränsen\n        (Inkomstår 2021)\n      </h2>\n      <p>\n        Alla beräkningar är baserade på att det endast är du som tar ut lön från\n        företaget och att all lön som redovisas i formuläret är ifrån ditt\n        företag.\n      </p>\n      <Wrapper>\n        <Stack>\n          <p>\n            Samla in samtliga{' '}\n            <a href=\"https://sso.skatteverket.se/ms/ms_web/page.do#/privat/skatter-deklaration/inkomstuppgifter\">\n              inkomstuppgifter från skatteverket\n            </a>{' '}\n            till och med November.\n          </p>\n          <TextInput\n            label=\"Bruttolön\"\n            type=\"number\"\n            value={bruttoLonInput}\n            onChange={handleBruttoLonChange}\n          />\n          <TextInput\n            label=\"Förmåner\"\n            type=\"number\"\n            value={formanerInput}\n            onChange={handleFormanerIChange}\n          />\n          <TextInput\n            label=\"Ersättningar och pension \"\n            type=\"number\"\n            value={ersattningarOchPensionInput}\n            onChange={handleErsattningarOchPensionChange}\n          />\n        </Stack>\n        <Stack>\n          <p>Inkomster totalt: {sekFormatter.format(totalIncome)}</p>\n          <p>\n            <a href=\"https://www.skatteverket.se/privat/etjansterochblanketter/svarpavanligafragor/inkomstavtjanst/privattjansteinkomsterfaq/narskamanbetalastatliginkomstskattochhurhogarden.5.10010ec103545f243e8000166.html\">\n              Brytpunkt innan statlig skatt\n            </a>\n            : {sekFormatter.format(StateTaxBreakPoint)}\n          </p>\n          <p>\n            Tänk också på för att kunna använda{' '}\n            <a href=\"https://www.bjornlunden.se/skatteplanering/s%C3%A5-maxar-du-utdelningen-enligt-312-regle__211\">\n              huvudregeln för utdelning måste du minst ta ut\n            </a>{' '}\n            {sekFormatter.format(HuvudregelnIncomeBreakPoint)}. Detta beloppet\n            är baserat på att det är endast du som tar ut lön från företaget.\n          </p>\n          <p>\n            Föreslagen bruttolön i december:{' '}\n            <b>{sekFormatter.format(suggestedDecSalary)}</b>\n          </p>\n          <p>\n            Lägsta lön för att kunna använda huvudregeln för utdelning 2022:{' '}\n            <b>\n              {sekFormatter.format(\n                Math.max(HuvudregelnIncomeBreakPoint - bruttoLon, 0),\n              )}\n            </b>\n          </p>\n        </Stack>\n      </Wrapper>\n    </PageWrapper>\n  );\n};\n\nexport default CalculateDecemberSalary;\n"],"names":["Stack","styled","StyledWrapper","StyledInput","StyledLabel","props","label","onChange","value","type","step","handleChange","useCallback","e","currentTarget","PageWrapper","Wrapper","ensureNumber","input","fallback","parsed","parseFloat","Number","isFinite","StateTaxBreakPoint","HuvudregelnIncomeBreakPoint","sekFormatter","Intl","NumberFormat","style","currency","useNumberInputState","initialInput","fallbackValue","useState","bruttoLonInput","handleBruttoLonChange","bruttoLon","formanerInput","handleFormanerIChange","formaner","ersattningarOchPensionInput","handleErsattningarOchPensionChange","totalIncome","suggestedDecSalary","href","format","Math","max"],"sourceRoot":""}
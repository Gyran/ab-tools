{"version":3,"sources":["components/text-input/index.tsx","components/layout/index.js","components/invoice-qr-code.tsx/index.tsx","components/qr-code/index.tsx","pages/skv-qrcode-page.tsx"],"names":["StyledWrapper","styled","div","StyledInput","input","StyledLabel","label","TextInput","props","onChange","value","type","step","handleChange","useCallback","e","currentTarget","Stack","PaymentMethodType","QRCode","content","width","canvasRef","useRef","useEffect","current","qrcode","toCanvas","errorCorrectionLevel","ref","InvoiceQRCode","uqr","tp","nme","cid","iref","ddt","Date","due","pt","BG","acc","useMemo","JSON","stringify","toISOString","slice","replace","SKV_BG_NUMBER","OCR_LOCAL_STORAGE_KEY","PageWrapper","QRPagePartWrapper","QRWrapper","DimmingOverlay","SKVQRCodePage","useState","stored","window","localStorage","getItem","parsed","parseInt","Number","isFinite","toString","ocrInput","setOCRInput","amountInput","setAmountInput","handleOCRChange","setItem","handleAmountChange","amount","parseFloat","ocr"],"mappings":"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","file":"static/js/4.66c46efb.chunk.js","sourcesContent":["import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import styled from 'styled-components/macro';\n\nconst Stack = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-row-gap: 10px;\n`;\n\nexport { Stack };\n","import React, { useMemo } from 'react';\nimport QRCode from '../qr-code';\n\nexport enum PaymentMethodType {\n  IBAN = 'IBAN',\n  BBAN = 'BBAN',\n  BG = 'bg',\n  PG = 'PG',\n}\n\ntype Props = {\n  width: number;\n\n  // https://drive.google.com/file/d/14XR6F1XnUkuWatldkOVr69Fr4of5g98P/view\n  uqr?: number;\n  tp?: number;\n  nme?: string;\n  cid?: string;\n  iref?: number;\n  ddt?: Date;\n  due?: number;\n  pt?: PaymentMethodType;\n  acc?: string;\n};\n\nconst InvoiceQRCode = (props: Props) => {\n  const {\n    uqr = 1,\n    tp = 1,\n    nme = '',\n    cid = '',\n    iref = -1,\n    ddt = new Date(),\n    due = 0,\n    pt = PaymentMethodType.BG,\n    acc = '',\n\n    width,\n  } = props;\n\n  const content = useMemo(() => {\n    return JSON.stringify({\n      uqr,\n      tp,\n      nme,\n      cid,\n      iref,\n      ddt: ddt.toISOString().slice(0, 10).replace(/-/g, ''),\n      due,\n      pt,\n      acc,\n    });\n  }, [uqr, tp, nme, cid, iref, ddt, due, pt, acc]);\n\n  return <QRCode content={content} width={width} />;\n};\n\nexport default InvoiceQRCode;\n","import React, { useEffect, useRef } from 'react';\nimport qrcode from 'qrcode';\n\ntype QRCodeProps = {\n  content: string;\n  width: number;\n};\nconst QRCode = (props: QRCodeProps) => {\n  const { content, width } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      qrcode.toCanvas(canvasRef.current, content, {\n        width,\n        errorCorrectionLevel: 'H',\n      });\n    }\n  }, [content, width]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default QRCode;\n","import { useCallback, useState } from 'react';\nimport styled from 'styled-components/macro';\nimport InvoiceQRCode, {\n  PaymentMethodType,\n} from '../components/invoice-qr-code.tsx';\nimport TextInput from '../components/text-input';\nimport { Stack } from '../components/layout';\n\nconst QR_CODE_WIDTH = 300;\nconst SKV_BG_NUMBER = '5050-1055';\n\nconst OCR_LOCAL_STORAGE_KEY = 'SKV_OCR';\n\nconst PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n`;\nconst QRPagePartWrapper = styled.div`\n  padding: 50px;\n  display: flex;\n  justify-content: center;\n`;\nconst QRWrapper = styled.div`\n  position: relative;\n  width: ${QR_CODE_WIDTH}px;\n  height: ${QR_CODE_WIDTH}px;\n`;\n\nconst DimmingOverlay = styled.div`\n  padding: 50px;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  display: flex;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: black;\n  opacity: 0.9;\n`;\n\nconst SKVQRCodePage = () => {\n  const [ocrInput, setOCRInput] = useState(() => {\n    const stored = window.localStorage.getItem(OCR_LOCAL_STORAGE_KEY);\n    if (stored) {\n      const parsed = parseInt(stored, 10);\n      if (Number.isFinite(parsed)) {\n        return parsed.toString();\n      }\n    }\n\n    return '';\n  });\n  const [amountInput, setAmountInput] = useState('');\n\n  const handleOCRChange = useCallback((value: string) => {\n    setOCRInput(value);\n    window.localStorage.setItem(OCR_LOCAL_STORAGE_KEY, value);\n  }, []);\n  const handleAmountChange = useCallback((value: string) => {\n    setAmountInput(value);\n  }, []);\n\n  const amount = parseFloat(amountInput);\n  const ocr = parseInt(ocrInput, 10);\n\n  return (\n    <PageWrapper>\n      <div>\n        <h2>Skattekonto QR-kod</h2>\n        <p>\n          Använd denna sida för att autoifylla en betalning till ditt\n          skattekonto genom att scanna qr koden. Glöm inte att verifiera det som\n          står i din bank innan du gör någon betalning.\n        </p>\n        <Stack>\n          <TextInput\n            label=\"OCR\"\n            type=\"number\"\n            onChange={handleOCRChange}\n            value={ocrInput}\n          />\n          <TextInput\n            label=\"Amount\"\n            type=\"number\"\n            onChange={handleAmountChange}\n            value={amountInput}\n            step={0.1}\n          />\n          <div>BG kontonummer: {SKV_BG_NUMBER}</div>\n        </Stack>\n      </div>\n      <QRPagePartWrapper>\n        <QRWrapper>\n          <InvoiceQRCode\n            width={QR_CODE_WIDTH}\n            iref={ocr}\n            acc={SKV_BG_NUMBER}\n            due={amount}\n            pt={PaymentMethodType.BG}\n          />\n          {!Number.isFinite(amount) && (\n            <DimmingOverlay>\n              Fyll i alla fält för att få en giltig QR-kod\n            </DimmingOverlay>\n          )}\n        </QRWrapper>\n      </QRPagePartWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default SKVQRCodePage;\n"],"sourceRoot":""}
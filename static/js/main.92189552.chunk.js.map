{"version":3,"sources":["styling/index.ts","styling/global-styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Colors","Theme","Primary","Background","Text","Link","Spacing","ContentMaxWidth","GlobalStyles","createGlobalStyle","SKVQRCodePage","React","lazy","BokioBackupPage","MomsSnurraPage","InvoiceQRCodePage","HomePage","StyledNavLink","styled","NavLink","activeClassName","MyNavLink","props","to","children","end","AppWrapper","div","PageWrapper","Navigation","nav","App","fallback","path","element","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAAMA,G,MAIK,aAmBIC,EAZD,CACZD,OAAQ,CACNE,QAASF,EACTG,WANW,YAOXC,KAdK,OAeLC,KAAML,GAERM,QAAS,CACPC,gBAAiB,M,QCLNC,EAXMC,YAAH,mHAEIR,EAAMD,OAAOG,WACxBF,EAAMD,OAAOI,KAIbH,EAAMD,OAAOK,M,OCElBK,EAAgBC,IAAMC,MAAK,kBAAM,sDACjCC,EAAkBF,IAAMC,MAAK,kBAAM,gCACnCE,EAAiBH,IAAMC,MAAK,kBAAM,gCAClCG,EAAoBJ,IAAMC,MAAK,kBAAM,sDACrCI,EAAWL,IAAMC,MAAK,kBAAM,gCAM5BK,EAAgBC,YAAOC,KAAV,wEAAGD,CAAH,wKAMNjB,EAAMD,OAAOE,SAKpB,qBAAGkB,kBAEenB,EAAMD,OAAOE,QACxBD,EAAMD,OAAOG,YAGpBkB,EAAY,SAACC,GACjB,IAAQC,EAAiBD,EAAjBC,GAAIC,EAAaF,EAAbE,SAEZ,OACE,cAACP,EAAD,CAAeG,gBAAgB,SAASG,GAAIA,EAAIE,KAAK,EAArD,SACE,+BAAOD,OAKPE,EAAaR,IAAOS,IAAV,qEAAGT,CAAH,MACVU,EAAcV,IAAOS,IAAV,sEAAGT,CAAH,qFAEkBjB,EAAMK,QAAQC,iBAM3CsB,EAAaX,IAAOY,IAAV,qEAAGZ,CAAH,oFACIjB,EAAMK,QAAQC,iBAkCnBwB,MA5Bf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAACL,EAAD,WACE,eAACG,EAAD,WACE,cAAC,EAAD,CAAWN,GAAG,IAAd,iBAEA,cAAC,EAAD,CAAWA,GAAG,UAAd,4BACA,cAAC,EAAD,CAAWA,GAAG,gBAAd,6BAGF,cAACK,EAAD,UACE,cAAC,WAAD,CAAUI,SAAU,6CAApB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAClB,EAAD,MACzB,cAAC,IAAD,CAAOiB,KAAK,cAAcC,QAAS,cAACnB,EAAD,MACnC,cAAC,IAAD,CAAOkB,KAAK,UAAUC,QAAS,cAACxB,EAAD,MAC/B,cAAC,IAAD,CAAOuB,KAAK,gBAAgBC,QAAS,cAACrB,EAAD,MACrC,cAAC,IAAD,CAAOoB,KAAK,QAAQC,QAAS,cAACpB,EAAD,oBCxEvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92189552.chunk.js","sourcesContent":["const Colors = {\n  White: '#FFF',\n  Black: '#000',\n\n  Sunglow: '#ffca3aff',\n  SizzlingRed: '#ff595eff',\n  YellowGreen: '#8ac926ff',\n  GreenBlueCrayola: '#1982c4ff',\n  RoyalPurple: '#6a4c93ff',\n};\n\nconst Theme = {\n  Colors: {\n    Primary: Colors.Sunglow,\n    Background: Colors.RoyalPurple,\n    Text: Colors.White,\n    Link: Colors.Sunglow,\n  },\n  Spacing: {\n    ContentMaxWidth: 960,\n  },\n};\n\nexport default Theme;\n","import { createGlobalStyle } from 'styled-components';\nimport Theme from '.';\n\nconst GlobalStyles = createGlobalStyle`\nhtml {\n  background-color: ${Theme.Colors.Background};\n  color: ${Theme.Colors.Text};\n}\n\na, a:visited {\n  color: ${Theme.Colors.Link};\n}\n`;\n\nexport default GlobalStyles;\n","import React, { PropsWithChildren, Suspense } from 'react';\nimport {\n  Route,\n  BrowserRouter as Router,\n  NavLink,\n  Routes,\n} from 'react-router-dom';\nimport styled from 'styled-components/macro';\nimport './App.css';\nimport Theme from './styling';\nimport GlobalStyles from './styling/global-styles';\n\nconst SKVQRCodePage = React.lazy(() => import('./pages/skv-qrcode-page'));\nconst BokioBackupPage = React.lazy(() => import('./pages/bokio-backup-page'));\nconst MomsSnurraPage = React.lazy(() => import('./pages/vat-calculator'));\nconst InvoiceQRCodePage = React.lazy(() => import('./pages/InvoiceQRCodePage'));\nconst HomePage = React.lazy(() => import('./pages/home'));\n\ntype MyNavLinkProps = PropsWithChildren<{\n  to: string;\n}>;\n\nconst StyledNavLink = styled(NavLink)`\n  display: inline-block;\n  padding: 10px;\n  text-decoration: none;\n\n  & span {\n    color: ${Theme.Colors.Primary};\n    padding: 2px 8px;\n    border-radius: 3px;\n  }\n\n  &.${({ activeClassName }) => activeClassName} span,\n  &:hover span {\n    background-color: ${Theme.Colors.Primary};\n    color: ${Theme.Colors.Background};\n  }\n`;\nconst MyNavLink = (props: MyNavLinkProps) => {\n  const { to, children } = props;\n\n  return (\n    <StyledNavLink activeClassName=\"active\" to={to} end={true}>\n      <span>{children}</span>\n    </StyledNavLink>\n  );\n};\n\nconst AppWrapper = styled.div``;\nconst PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min(${Theme.Spacing.ContentMaxWidth}px, 100%) 1fr;\n\n  & > * {\n    grid-column: 2;\n  }\n`;\nconst Navigation = styled.nav`\n  max-width: calc(${Theme.Spacing.ContentMaxWidth}px + 100px);\n  margin: 0 auto;\n  font-size: 1.4rem;\n  padding: 10px 16px;\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <GlobalStyles />\n      <AppWrapper>\n        <Navigation>\n          <MyNavLink to=\"/\">Hem</MyNavLink>\n          {/* <MyNavLink to=\"/invoice-qr\">Invoice QR</MyNavLink> */}\n          <MyNavLink to=\"/skv-qr\">Skattekonto QR</MyNavLink>\n          <MyNavLink to=\"/bokio-backup\">Bokio Backup</MyNavLink>\n          {/* <MyNavLink to=\"/moms\">Momssnurra</MyNavLink> */}\n        </Navigation>\n        <PageWrapper>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n              <Route path=\"/invoice-qr\" element={<InvoiceQRCodePage />} />\n              <Route path=\"/skv-qr\" element={<SKVQRCodePage />} />\n              <Route path=\"/bokio-backup\" element={<BokioBackupPage />} />\n              <Route path=\"/moms\" element={<MomsSnurraPage />} />\n            </Routes>\n          </Suspense>\n        </PageWrapper>\n      </AppWrapper>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/invoice-qr-code.tsx/index.tsx","components/qr-code/index.tsx","pages/InvoiceQRCodePage.tsx","components/text-input.tsx/index.tsx","pages/skv-qrcode-page.tsx","styling/index.ts","styling/global-styles.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PaymentMethodType","QRCode","props","content","width","canvasRef","useRef","useEffect","current","qrcode","toCanvas","errorCorrectionLevel","ref","InvoiceQRCode","uqr","tp","nme","cid","iref","ddt","Date","due","pt","BG","acc","useMemo","JSON","stringify","toISOString","slice","replace","identityParseFn","value","InvoiceQRCodePage","inputItems","label","element","type","step","dataKey","parseFn","parseFloat","parseInt","PG","useState","getTime","data","setData","updateData","useCallback","key","newValue","prevData","className","map","inputItem","React","cloneElement","onChange","e","strValue","currentTarget","StyledWrapper","styled","div","StyledInput","input","StyledLabel","TextInput","handleChange","SKV_BG_NUMBER","OCR_LOCAL_STORAGE_KEY","PageWrapper","QRWrapper","Stack","SKVQRCodePage","stored","window","localStorage","getItem","parsed","Number","isFinite","toString","ocr","setOCR","amount","setAmount","handleOCRChange","setItem","handleAmountChange","Theme","Colors","Primary","Background","Text","Spacing","ContentMaxWidth","GlobalStyles","createGlobalStyle","StyledNavLink","NavLink","activeClassName","MyNavLink","to","children","exact","AppWrapper","Navigation","nav","App","basename","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f28e066.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport QRCode from '../qr-code';\n\nexport enum PaymentMethodType {\n  IBAN = 'IBAN',\n  BBAN = 'BBAN',\n  BG = 'bg',\n  PG = 'PG',\n}\n\ntype Props = {\n  width: number;\n\n  // https://drive.google.com/file/d/14XR6F1XnUkuWatldkOVr69Fr4of5g98P/view\n  uqr?: number;\n  tp?: number;\n  nme?: string;\n  cid?: string;\n  iref?: number;\n  ddt?: Date;\n  due?: number;\n  pt?: PaymentMethodType;\n  acc?: string;\n};\n\nconst InvoiceQRCode = (props: Props) => {\n  const {\n    uqr = 1,\n    tp = 1,\n    nme = '',\n    cid = '',\n    iref = -1,\n    ddt = new Date(),\n    due = 0,\n    pt = PaymentMethodType.BG,\n    acc = '',\n\n    width,\n  } = props;\n\n  const content = useMemo(() => {\n    return JSON.stringify({\n      uqr,\n      tp,\n      nme,\n      cid,\n      iref,\n      ddt: ddt.toISOString().slice(0, 10).replace(/-/g, ''),\n      due,\n      pt,\n      acc,\n    });\n  }, [uqr, tp, nme, cid, iref, ddt, due, pt, acc]);\n\n  return <QRCode content={content} width={width} />;\n};\n\nexport default InvoiceQRCode;\n","import React, { useEffect, useRef } from 'react';\nimport qrcode from 'qrcode';\n\ntype QRCodeProps = {\n  content: string;\n  width: number;\n};\nconst QRCode = (props: QRCodeProps) => {\n  const { content, width } = props;\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      qrcode.toCanvas(canvasRef.current, content, {\n        width,\n        errorCorrectionLevel: 'H',\n      });\n    }\n  }, [content, width]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default QRCode;\n","import React, { ReactElement, useCallback, useState } from 'react';\nimport InvoiceQRCode, {\n  PaymentMethodType,\n} from '../components/invoice-qr-code.tsx';\n\nconst identityParseFn = (value: string) => value;\n\ntype InputItem = {\n  label: string;\n  element: ReactElement;\n  dataKey: string;\n  parseFn?: (value: string) => unknown;\n};\n\nconst QR_CODE_WIDTH = 300;\n\nconst InvoiceQRCodePage = () => {\n  const inputItems: InputItem[] = [\n    {\n      label: 'amount',\n      element: <input type=\"number\" step={0.01} />,\n      dataKey: 'due',\n      parseFn: (value) => parseFloat(value),\n    },\n    {\n      label: 'ocr',\n      element: <input type=\"number\" />,\n      dataKey: 'iref',\n      parseFn: (value) => parseInt(value, 10),\n    },\n    { label: 'account', element: <input type=\"text\" />, dataKey: 'acc' },\n    {\n      label: 'payment type',\n      element: (\n        <select>\n          <option>{PaymentMethodType.BG}</option>\n          <option>{PaymentMethodType.PG}</option>\n        </select>\n      ),\n      dataKey: 'pt',\n    },\n  ];\n\n  const [data, setData] = useState({\n    uqr: 1,\n    tp: 1,\n    nme: '',\n    cid: '',\n    iref: -1,\n    ddt: new Date(new Date().getTime() + 1 * 24 * 60 * 60 * 1000),\n    due: -1,\n    pt: PaymentMethodType.BG,\n    acc: '',\n  });\n\n  const updateData = useCallback((key, newValue) => {\n    setData((prevData) => {\n      return { ...prevData, [key]: newValue };\n    });\n  }, []);\n\n  return (\n    <div className=\"app-wrapper\">\n      {inputItems.map((inputItem) => {\n        return (\n          <div>\n            {inputItem.label}{' '}\n            {React.cloneElement(inputItem.element, {\n              onChange: (e: any) => {\n                const strValue = e.currentTarget.value;\n                const parseFn = inputItem.parseFn ?? identityParseFn;\n\n                updateData(inputItem.dataKey, parseFn(strValue));\n              },\n            })}\n          </div>\n        );\n      })}\n      <InvoiceQRCode width={QR_CODE_WIDTH} {...data} />\n    </div>\n  );\n};\n\nexport default InvoiceQRCodePage;\n","import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport InvoiceQRCode, {\n  PaymentMethodType,\n} from '../components/invoice-qr-code.tsx';\nimport TextInput from '../components/text-input.tsx';\n\nconst QR_CODE_WIDTH = 300;\nconst SKV_BG_NUMBER = '5050-1055';\n\nconst OCR_LOCAL_STORAGE_KEY = 'SKV_OCR';\n\nconst PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 300px 1fr;\n`;\nconst QRWrapper = styled.div`\n  padding: 50px;\n  display: flex;\n  justify-content: center;\n`;\nconst Stack = styled.div`\n  & > * + * {\n    margin-top: 10px;\n  }\n`;\n\nconst SKVQRCodePage = () => {\n  const [ocr, setOCR] = useState(() => {\n    const stored = window.localStorage.getItem(OCR_LOCAL_STORAGE_KEY);\n    if (stored) {\n      const parsed = parseInt(stored, 10);\n      if (Number.isFinite(parsed)) {\n        return parsed.toString();\n      }\n    }\n\n    return '';\n  });\n  const [amount, setAmount] = useState('');\n\n  const handleOCRChange = useCallback((value: string) => {\n    setOCR(value);\n    window.localStorage.setItem(OCR_LOCAL_STORAGE_KEY, value);\n  }, []);\n  const handleAmountChange = useCallback((value: string) => {\n    setAmount(value);\n  }, []);\n\n  return (\n    <PageWrapper>\n      <div>\n        <h2>Skattekonto QR-kod</h2>\n        <p>\n          Använd denna sida för att autoifylla en betalning till ditt\n          skattekonto genom att scanna qr koden. Glöm inte att verifiera det som\n          står i din bank innan du gör någon betalning.\n        </p>\n        <Stack>\n          <TextInput\n            label=\"OCR\"\n            type=\"number\"\n            onChange={handleOCRChange}\n            value={ocr}\n          />\n          <TextInput\n            label=\"Amount\"\n            type=\"number\"\n            onChange={handleAmountChange}\n            value={amount}\n            step={0.1}\n          />\n          <div>BG kontonummer: {SKV_BG_NUMBER}</div>\n        </Stack>\n      </div>\n      <QRWrapper>\n        <InvoiceQRCode\n          width={QR_CODE_WIDTH}\n          iref={parseInt(ocr, 10)}\n          acc={SKV_BG_NUMBER}\n          due={parseFloat(amount)}\n          pt={PaymentMethodType.BG}\n        />\n      </QRWrapper>\n    </PageWrapper>\n  );\n};\n\nexport default SKVQRCodePage;\n","const Colors = {\n  White: '#FFF',\n  Black: '#000',\n\n  Sunglow: '#ffca3aff',\n  SizzlingRed: '#ff595eff',\n  YellowGreen: '#8ac926ff',\n  GreenBlueCrayola: '#1982c4ff',\n  RoyalPurple: '#6a4c93ff',\n};\n\nconst Theme = {\n  Colors: {\n    Primary: Colors.Sunglow,\n    Background: Colors.RoyalPurple,\n    Text: Colors.White,\n  },\n  Spacing: {\n    ContentMaxWidth: 960,\n  },\n};\n\nexport default Theme;\n","import { createGlobalStyle } from 'styled-components';\nimport Theme from '.';\n\nconst GlobalStyles = createGlobalStyle`\nhtml {\n  background-color: ${Theme.Colors.Background};\n  color: ${Theme.Colors.Text};\n}\n`;\n\nexport default GlobalStyles;\n","import React, { PropsWithChildren } from 'react';\nimport {\n  Switch,\n  Route,\n  BrowserRouter as Router,\n  NavLink,\n} from 'react-router-dom';\nimport styled from 'styled-components';\nimport './App.css';\nimport InvoiceQRCodePage from './pages/InvoiceQRCodePage';\nimport SKVQRCodePage from './pages/skv-qrcode-page';\nimport Theme from './styling';\nimport GlobalStyles from './styling/global-styles';\n\ntype MyNavLinkProps = PropsWithChildren<{\n  to: string;\n}>;\n\nconst StyledNavLink = styled(NavLink)`\n  display: inline-block;\n  padding: 10px;\n  text-decoration: none;\n\n  & span {\n    color: ${Theme.Colors.Primary};\n    padding: 2px 8px;\n    border-radius: 3px;\n  }\n\n  &.${({ activeClassName }) => activeClassName} span,\n  &:hover span {\n    background-color: ${Theme.Colors.Primary};\n    color: ${Theme.Colors.Background};\n  }\n`;\nconst MyNavLink = (props: MyNavLinkProps) => {\n  const { to, children } = props;\n\n  return (\n    <StyledNavLink activeClassName=\"active\" to={to} exact={true}>\n      <span>{children}</span>\n    </StyledNavLink>\n  );\n};\n\nconst AppWrapper = styled.div``;\nconst PageWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min(${Theme.Spacing.ContentMaxWidth}px, 100%) 1fr;\n\n  & > * {\n    grid-column: 2;\n  }\n`;\nconst Navigation = styled.nav`\n  max-width: calc(${Theme.Spacing.ContentMaxWidth}px + 100px);\n  margin: 0 auto;\n  font-size: 1.4rem;\n  padding: 10px 16px;\n`;\n\nfunction App() {\n  return (\n    <Router basename=\"/ab-tools\">\n      <GlobalStyles />\n      <AppWrapper>\n        <Navigation>\n          <MyNavLink to=\"/\">Home</MyNavLink>\n          {/* <MyNavLink to=\"/invoice-qr\">Invoice QR</MyNavLink> */}\n          <MyNavLink to=\"/skv-qr\">Skattekonto QR</MyNavLink>\n        </Navigation>\n        <PageWrapper>\n          <Switch>\n            <Route path=\"/invoice-qr\">\n              <InvoiceQRCodePage />\n            </Route>\n            <Route path=\"/skv-qr\">\n              <SKVQRCodePage />\n            </Route>\n            <Route path=\"/\">\n              <div>\n                Små verktyg som kan vara smidiga för dig som driver ett AB\n                (eller annan typ av bolag).\n              </div>\n            </Route>\n          </Switch>\n        </PageWrapper>\n      </AppWrapper>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
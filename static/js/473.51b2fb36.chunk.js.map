{"version":3,"file":"static/js/473.51b2fb36.chunk.js","mappings":"6IAEMA,E,QAAQC,GAAAA,IAAAA,WAAH,wDAAGA,CAAH,gE,qECCLC,EAAgBD,EAAAA,GAAAA,IAAH,sBACbE,EAAcF,EAAAA,GAAAA,MAAH,sBACXG,EAAcH,EAAAA,GAAAA,MAAH,wFAoCjB,IAvBkB,SAACI,GACjB,IAAQC,EAAgDD,EAAhDC,MAAOC,EAAyCF,EAAzCE,SAAUC,EAA+BH,EAA/BG,MAAzB,EAAwDH,EAAxBI,KAAAA,OAAhC,MAAuC,OAAvC,EAA+CC,EAASL,EAATK,KAEzCC,GAAeC,EAAAA,EAAAA,cACnB,SAACC,GACCN,EAASM,EAAEC,cAAcN,SAE3B,CAACD,IAGH,OACE,UAACL,EAAD,YACE,SAACE,EAAD,UAAcE,KACd,SAACH,EAAD,CACEI,SAAUI,EACVF,KAAMA,EACND,MAAOA,EACPE,KAAMA,S,iFC4Bd,UAxDsB,SAACL,GACrB,OAAwCU,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwCF,EAAAA,EAAAA,UAAS,IAAjD,eAAOG,EAAP,KAAqBC,EAArB,KAEMC,GAAUC,EAAAA,EAAAA,UACd,iBAAwB,KAAjBL,EAAsBM,SAASN,EAAc,IAAM,KAAO,IACjE,CAACA,IAEGO,GAAUF,EAAAA,EAAAA,UAAQ,kBAAMG,WAAWN,KAAe,CAACA,IACnDO,GAASJ,EAAAA,EAAAA,UAAQ,kBAAME,EAAUH,IAAS,CAACG,EAASH,IAEpDM,GAAuBd,EAAAA,EAAAA,cAAY,SAACJ,GACxCS,EAAgBT,KACf,IACGmB,GAAsBf,EAAAA,EAAAA,cAAY,SAACJ,GACvCW,EAAgBX,KACf,IACGoB,GAAqBhB,EAAAA,EAAAA,cACzB,SAACJ,GACC,IAAMqB,EAAYL,WAAWhB,GACzBsB,OAAOC,SAASF,GAGlBV,GAFiBU,GAAa,EAAIT,IAETY,YAEzBb,EAAgB,MAGpB,CAACC,IAGH,OACE,UAAC,IAAD,YACE,SAAC,IAAD,CACEd,MAAM,eACNG,KAAK,SACLD,MAAOQ,EACPT,SAAUmB,KAEZ,SAAC,IAAD,CACEpB,MAAM,sBACNG,KAAK,SACLD,MAAOU,EACPX,SAAUoB,KAEZ,SAAC,IAAD,CACErB,MAAM,sBACNG,KAAK,SACLD,OAAQe,EAAUE,GAAQO,WAC1BzB,SAAUqB,KAEZ,oCAAYE,OAAOC,SAASN,GAAUA,EAAOQ,QAAQ,GAAK,IAA1D","sources":["components/layout/index.js","components/text-input/index.tsx","pages/vat-calculator.tsx"],"sourcesContent":["import styled from 'styled-components/macro';\n\nconst Stack = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-row-gap: 10px;\n`;\n\nexport { Stack };\n","import React, { useCallback, ChangeEvent } from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div``;\nconst StyledInput = styled.input``;\nconst StyledLabel = styled.label`\n  display: block;\n  font-weight: bold;\n  margin-bottom: 5px;\n`;\n\ntype Props = {\n  label: string;\n  onChange: (value: string) => void;\n  value: string;\n  type?: 'text' | 'number';\n  step?: number;\n};\nconst TextInput = (props: Props) => {\n  const { label, onChange, value, type = 'text', step } = props;\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <StyledWrapper>\n      <StyledLabel>{label}</StyledLabel>\n      <StyledInput\n        onChange={handleChange}\n        type={type}\n        value={value}\n        step={step}\n      />\n    </StyledWrapper>\n  );\n};\n\nexport default TextInput;\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Stack } from '../components/layout';\nimport TextInput from '../components/text-input';\n\ntype Props = {};\n\nconst VatCalculator = (props: Props) => {\n  const [vatRateInput, setVatRateInput] = useState('25');\n  const [exclVatInput, setExclVatInput] = useState('');\n\n  const vatRate = useMemo(\n    () => (vatRateInput !== '' ? parseInt(vatRateInput, 10) / 100 : -1),\n    [vatRateInput],\n  );\n  const exclVat = useMemo(() => parseFloat(exclVatInput), [exclVatInput]);\n  const vatSum = useMemo(() => exclVat * vatRate, [exclVat, vatRate]);\n\n  const handleVatRangeChange = useCallback((value) => {\n    setVatRateInput(value);\n  }, []);\n  const handleExclVatChange = useCallback((value) => {\n    setExclVatInput(value);\n  }, []);\n  const handleIncVatChange = useCallback(\n    (value) => {\n      const parsedInc = parseFloat(value);\n      if (Number.isFinite(parsedInc)) {\n        const calcExcl = parsedInc / (1 + vatRate);\n\n        setExclVatInput(calcExcl.toString());\n      } else {\n        setExclVatInput('');\n      }\n    },\n    [vatRate],\n  );\n\n  return (\n    <Stack>\n      <TextInput\n        label=\"Momssats (%)\"\n        type=\"number\"\n        value={vatRateInput}\n        onChange={handleVatRangeChange}\n      />\n      <TextInput\n        label=\"Exklusive moms (kr)\"\n        type=\"number\"\n        value={exclVatInput}\n        onChange={handleExclVatChange}\n      />\n      <TextInput\n        label=\"Inklusive moms (kr)\"\n        type=\"number\"\n        value={(exclVat + vatSum).toString()}\n        onChange={handleIncVatChange}\n      />\n      <div>Moms: {Number.isFinite(vatSum) ? vatSum.toFixed(2) : '-'} kr</div>\n    </Stack>\n  );\n};\n\nexport default VatCalculator;\n"],"names":["Stack","styled","StyledWrapper","StyledInput","StyledLabel","props","label","onChange","value","type","step","handleChange","useCallback","e","currentTarget","useState","vatRateInput","setVatRateInput","exclVatInput","setExclVatInput","vatRate","useMemo","parseInt","exclVat","parseFloat","vatSum","handleVatRangeChange","handleExclVatChange","handleIncVatChange","parsedInc","Number","isFinite","toString","toFixed"],"sourceRoot":""}